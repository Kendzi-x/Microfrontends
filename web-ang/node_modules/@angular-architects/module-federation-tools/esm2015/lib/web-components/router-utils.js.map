{"version":3,"file":"router-utils.js","sourceRoot":"","sources":["../../../../../../libs/mf-tools/src/lib/web-components/router-utils.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,UAAU,CAAC,MAAc;IACrC,OAAO,CAAC,GAAiB,EAAE,EAAE;QACzB,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC5B,OAAO,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAC,CAAC,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,MAAc;IACnC,OAAO,CAAC,GAAiB,EAAE,EAAE;QACzB,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC1B,OAAO,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,MAAc,EAAE,OAAO,GAAG,KAAK;IACzD,IAAI,GAAW,CAAC;IAChB,IAAI,CAAC,OAAO,EAAE;QACV,GAAG,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;QACzD,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;KACN;SACI;QACD,GAAG,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;QACrD,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;KACN;AACL,CAAC","sourcesContent":["import { Router, UrlMatcher, UrlSegment } from '@angular/router';\r\n\r\nexport function startsWith(prefix: string): UrlMatcher {\r\n    return (url: UrlSegment[]) => {\r\n        const fullUrl = url.map(u => u.path).join('/');\r\n        if (fullUrl.startsWith(prefix)) {\r\n            return ({ consumed: url});\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nexport function endsWith(prefix: string): UrlMatcher {\r\n    return (url: UrlSegment[]) => {\r\n        const fullUrl = url.map(u => u.path).join('/');\r\n        if (fullUrl.endsWith(prefix)) {\r\n            return ({ consumed: url });\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nexport function connectRouter(router: Router, useHash = false): void {\r\n    let url: string;\r\n    if (!useHash) {\r\n        url = `${location.pathname.substr(1)}${location.search}`;\r\n        router.navigateByUrl(url);\r\n        window.addEventListener('popstate', () => {\r\n            router.navigateByUrl(url);\r\n        });\r\n    }\r\n    else {\r\n        url = `${location.hash.substr(1)}${location.search}`;\r\n        router.navigateByUrl(url);\r\n        window.addEventListener('hashchange', () => {\r\n            router.navigateByUrl(url);\r\n        });\r\n    }\r\n}"]}