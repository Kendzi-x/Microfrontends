{"version":3,"file":"bootstrap-utils.js","sourceRoot":"","sources":["../../../../../../libs/mf-tools/src/lib/web-components/bootstrap-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompilerOptions, enableProdMode, Injector, NgModuleRef, NgZone, PlatformRef, Type, Version } from \"@angular/core\";\r\nimport { platformBrowser } from \"@angular/platform-browser\";\r\nimport { VERSION } from '@angular/core';\r\nimport { getGlobalStateSlice, setGlobalStateSlice } from \"../utils/global-state\";\r\nimport { Router } from \"@angular/router\";\r\nimport { connectRouter } from \"./router-utils\";\r\n\r\nexport type AppType = 'shell' | 'microfrontend';\r\n\r\nexport type Options = {\r\n    production: boolean,\r\n    platformFactory?: () => PlatformRef,\r\n    compilerOptions?: CompilerOptions & BootstrapOptions,\r\n    version?: () => string | Version,\r\n    appType?: AppType;\r\n    /**\r\n     * Opt-out of ngZone sharing.\r\n     * Not recommanded.\r\n     * Default value true.\r\n     */\r\n    ngZoneSharing?: boolean,\r\n    /**\r\n     * Opt-out of platformSharing sharing.\r\n     * Possible, if dependencies are not shared or each bootstrapped\r\n     * remote app uses a different version.\r\n     * Default value true.\r\n     */\r\n    platformSharing?: boolean,\r\n    /**\r\n     * Deactivate support for legacy mode.\r\n     * Only recommanded if all used implementations depend on\r\n     * @angular-architects/module-federation-tools > 13.0.1.\r\n     * Default value true.\r\n     */\r\n    activeLegacyMode?: boolean\r\n};\r\n\r\ndeclare interface BootstrapOptions {\r\n    ngZone?: NgZone | 'zone.js' | 'noop';\r\n    ngZoneEventCoalescing?: boolean;\r\n    ngZoneRunCoalescing?: boolean;\r\n}\r\n\r\nlet ngZoneSharing = true;\r\nlet platformSharing = true;\r\nlet legacyMode = true;\r\n\r\nexport function getMajor(version: string): string {\r\n    const pre = version.match(/\\d+/)[0];\r\n    const post = version.match(/-.*/);\r\n\r\n    if (!pre) {\r\n        throw new Error('Cound not identify major version: ' + version);\r\n    }\r\n\r\n    if (post) {\r\n        return pre + post[0];\r\n    }\r\n\r\n    return pre;\r\n}\r\n\r\n/**\r\n * LEGACY IMPLEMENTATIONS START\r\n *\r\n * Can be deprecated in later major releases.\r\n *\r\n * To increase backwards compatibility legacy and current namespaces\r\n * within the window object are used.\r\n */\r\n\r\nexport type LegacyPlatformCache = {\r\n    platform: Record<string, PlatformRef>;\r\n};\r\n\r\nfunction getLegacyPlatformCache(): LegacyPlatformCache {\r\n    const platformCache = window as unknown as LegacyPlatformCache;\r\n    platformCache.platform = platformCache.platform || {};\r\n    return platformCache;\r\n}\r\n\r\nfunction getLegacyPlatform(key: string): PlatformRef {\r\n    const platform = getLegacyPlatformCache().platform[key];\r\n    /**\r\n     * If dependencies are not shared, platform with same version is different\r\n     * and shared platform will not be returned.\r\n     */\r\n    return platform instanceof PlatformRef ? platform : null;\r\n}\r\n\r\nfunction setLegacyPlatform(key: string, platform: PlatformRef): void {\r\n    getLegacyPlatformCache().platform[key] = platform;\r\n}\r\n\r\nfunction getLegacyNgZone(): NgZone {\r\n    return window['ngZone'];\r\n}\r\n\r\nfunction setLegacyNgZone(zone: NgZone): void {\r\n    window['ngZone'] = zone;\r\n}\r\n\r\n/**\r\n * LEGACY IMPLEMENTATIONS END\r\n */\r\n\r\nfunction getPlatformCache(): Map<Version, PlatformRef> {\r\n    return getGlobalStateSlice(\r\n        (state: { platformCache: Map<Version, PlatformRef> }) => state.platformCache\r\n    ) || setGlobalStateSlice({\r\n        platformCache: new Map<Version, PlatformRef>()\r\n    }).platformCache;\r\n}\r\n\r\nfunction setPlatform(version: Version, platform: PlatformRef): void {\r\n    if (platformSharing) {\r\n      legacyMode && setLegacyPlatform(version.full, platform);\r\n      getPlatformCache().set(version, platform);\r\n    }\r\n}\r\n\r\nfunction getPlatform(options: Options): PlatformRef {\r\n    if (!platformSharing) {\r\n        return options.platformFactory();\r\n    }\r\n\r\n    const versionResult = options.version();\r\n    const version = versionResult === VERSION.full ? VERSION : versionResult;\r\n    const versionKey = typeof version === 'string' ? version : version.full;\r\n\r\n    let platform =\r\n        getPlatformCache().get(version as Version) ||\r\n        (legacyMode && getLegacyPlatform(versionKey));\r\n\r\n    if (!platform) {\r\n        platform = options.platformFactory();\r\n        setPlatform(VERSION, platform);\r\n        options.production && enableProdMode();\r\n    }\r\n\r\n    return platform;\r\n}\r\n\r\nfunction getNgZone(): NgZone {\r\n    return getGlobalStateSlice(\r\n        (state: { ngZone: NgZone }) => state.ngZone\r\n    ) || getLegacyNgZone();\r\n}\r\n\r\nexport function shareNgZone(zone: NgZone): void {\r\n    if (ngZoneSharing) {\r\n      legacyMode && setLegacyNgZone(zone);\r\n      setGlobalStateSlice({ ngZone: zone });\r\n    }\r\n}\r\n\r\nexport function bootstrap<M>(module: Type<M>, options: Options): Promise<NgModuleRef<M>> {\r\n    ngZoneSharing = options.ngZoneSharing !== false;\r\n    platformSharing = options.platformSharing !== false;\r\n    legacyMode = options.activeLegacyMode !== false;\r\n    options.platformFactory = options.platformFactory || (() => platformBrowser());\r\n    options.version = options.version || (() => VERSION);\r\n\r\n    if (ngZoneSharing && !options.compilerOptions?.ngZone) {\r\n        options.compilerOptions = options.compilerOptions || {};\r\n        options.compilerOptions.ngZone = getNgZone();\r\n    }\r\n\r\n    return getPlatform(options).bootstrapModule(module, options.compilerOptions).then(ref => {\r\n\r\n        if (options.appType === 'shell') {\r\n            shareShellZone(ref.injector);\r\n        }\r\n        else if (options.appType === 'microfrontend') {\r\n            connectMicroFrontendRouter(ref.injector);\r\n        }\r\n\r\n        return ref;\r\n    });\r\n}\r\n\r\nfunction shareShellZone(injector: Injector) {\r\n    const ngZone = injector.get(NgZone, null);\r\n    if (!ngZone) {\r\n        console.warn('No NgZone to share found');\r\n        return;\r\n    }\r\n    shareNgZone(ngZone);\r\n}\r\n\r\nfunction connectMicroFrontendRouter(injector: Injector) {\r\n    const router = injector.get(Router);\r\n\r\n    if (!router) {\r\n        console.warn('No router to connect found');\r\n        return;\r\n    }\r\n\r\n    connectRouter(router);\r\n}\r\n\r\n"]}